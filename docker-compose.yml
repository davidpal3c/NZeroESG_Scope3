services:
  backend:
    build:
      context: ./nzeroesg-api
      dockerfile: Dockerfile
    container_name: nzeroesg-backend
    env_file:
      - ./nzeroesg-api/.env
    depends_on:
      embedder:
        condition: service_healthy
      chroma:
        condition: service_healthy
    ports:
      - "8000:8000"
    # restart: always
    restart: unless-stopped
    environment: 
      - EMBEDDER_URL=http://embedder:8002
      # - CHROMA_URL=http://chroma:8001
      # - HUGGINGFACEHUB_API_TOKEN=${HUGGINGFACEHUB_API_TOKEN} 
    
  embedder:
    build: 
      context: ./nzeroesg-embedder
      dockerfile: Dockerfile
    container_name: nzeroesg-embedder
    ports:
      - "8002:8002"                 
    restart: unless-stopped
    healthcheck: 
      # test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      test: ["CMD-SHELL", "python - <<'PY'\nimport socket,sys,urllib.request, json, time; \
        s=socket.socket(); \
        s.settimeout(2); \
        s.connect(('localhost',8002)); \
        s.close(); \
        data=urllib.request.urlopen('http://localhost:8002/health', timeout=3).read(); \
        sys.exit(0 if json.loads(data).get('status')=='ok' else 1)\nPY"]
      interval: 5s
      timeout: 5s
      retries: 9

  chroma: 
    # build:
    #   context: ./nzeroesg-chroma
    #   dockerfile: Dockerfile
    image: chromadb/chroma:latest
    container_name: nzeroesg-chroma
    ports:
      - "8001:8000"                 # expose on 8001 externally, 8000 internally
    volumes:
      - ./vectordb:/chroma_storage
    environment:
      - IS_PERSISTENT=TRUE 
    healthcheck:
      # test: ["CMD", "curl", "-sf", "http://localhost:8000/api/v1/heartbeat || exit 1"]
      test: ["CMD-SHELL", "python - <<'PY'\nimport socket,sys,urllib.request, json, time; \
        s=socket.socket(); \
        s.settimeout(2); \
        s.connect(('localhost',8000)); \
        s.close(); \
        data=urllib.request.urlopen('http://localhost:8000/api/v1/heartbeat', timeout=3).read(); \
        sys.exit(0 if json.loads(data).get('status')=='ok' else 1)\nPY"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    # environment:
    #   - CHROMA_DATABASE_DIR=/data    
    #   - CHROMA_PERSISTENCE_DIR=/data.  
    # volumes:
    #   - chroma_data:/data

  frontend:
    build:
      context: ./nzeroesg-client
      dockerfile: Dockerfile
    container_name: nzeroesg-frontend
    ports:
      - "3000:3000"   
    env_file:
      - ./nzeroesg-client/.env.local
    restart: always
    depends_on:
      - backend